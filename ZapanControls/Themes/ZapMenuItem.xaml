<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:l="clr-namespace:ZapanControls.Controls">

    <LinearGradientBrush x:Key="NormalBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#CCC" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="NormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#CCC" Offset="0.0"/>
                <GradientStop Color="#444" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <!-- TopLevelItem -->
    <ControlTemplate x:Key="TopLevelItemTemplateKey" TargetType="{x:Type l:ZapMenuItem}">
        <Border Name="Border" >
            <Grid SnapsToDevicePixels="True" UseLayoutRounding="True">
                <ContentPresenter Name="Content" 
                                  Margin="6,3,6,3" 
                                  ContentSource="Header" 
                                  RecognizesAccessKey="True" 
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                  Opacity="1" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Foreground" Value="{Binding MouseOverForeground, RelativeSource={RelativeSource Self}}"/>
                <Setter TargetName="Border" Property="Background" Value="{Binding MouseOverBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{Binding IsPressedForeground, RelativeSource={RelativeSource Self}}"/>
                <Setter TargetName="Content" Property="Opacity" Value="{Binding IsPressedBackgroundOpacity, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="Border" Property="Background" Value="{Binding IsPressedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding IsPressedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="Border" Property="Opacity"  Value="0.8"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{Binding DisabledForeground, RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="Border" Property="Background" Value="{Binding DisabledBackground, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding DisabledBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="Content" Property="Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- TopLevelHeader -->
    <ControlTemplate x:Key="TopLevelHeaderTemplateKey" TargetType="{x:Type l:ZapMenuItem}">
        <Border Name="Border" >
            <Grid>
                <ContentPresenter Margin="6,3,6,3" 
                                  ContentSource="Header" 
                                  RecognizesAccessKey="True" 
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                  UseLayoutRounding="{TemplateBinding UseLayoutRounding}"/>
                <Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade">
                    <Border Name="SubmenuBorder" 
                            Margin="0,0,5,5"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                            UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                            Background="{TemplateBinding PopupBackground}"
                            BorderBrush="{TemplateBinding PopupBorderBrush}"
                            BorderThickness="{TemplateBinding PopupBorderThickness}" >
                        <Border.Effect>
                            <DropShadowEffect ShadowDepth="1" Direction="270" />
                        </Border.Effect>
                        <StackPanel Name="Content" 
                                    IsItemsHost="True" 
                                    KeyboardNavigation.DirectionalNavigation="Cycle" 
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                    UseLayoutRounding="{TemplateBinding UseLayoutRounding}"/>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="IsRoundPopup" Value="True">
                <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="0,0,4,4"/>
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,3"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Foreground" Value="{Binding MouseOverForeground, RelativeSource={RelativeSource Self}}"/>
                <Setter TargetName="Border" Property="Background" Value="{Binding MouseOverBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{Binding IsPressedForeground, RelativeSource={RelativeSource Self}}"/>
                <Setter TargetName="Content" Property="Opacity" Value="{Binding IsPressedBackgroundOpacity, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="Border" Property="Background" Value="{Binding IsPressedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding IsPressedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="Border" Property="Opacity"  Value="0.8"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{Binding DisabledForeground, RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="Border" Property="Background" Value="{Binding DisabledBackground, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding DisabledBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="Content" Property="Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SubmenuItem -->
    <ControlTemplate x:Key="SubmenuItemTemplateKey" TargetType="{x:Type l:ZapMenuItem}">
        <Border Name="Border" >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>                
                <ContentPresenter Name="Icon" 
                                  Margin="6,0,6,0" 
                                  VerticalAlignment="Center" 
                                  ContentSource="Icon" 
                                  Width="16" Height="16" 
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                  UseLayoutRounding="{TemplateBinding UseLayoutRounding}"/>
                <Viewbox Name="Check" 
                         Width="16" Height="16" 
                         Visibility="Collapsed" 
                         VerticalAlignment="Center"
                         HorizontalAlignment="Center"
                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                         UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
                    <Canvas Width="24" Height="24">
                        <Path Fill="{StaticResource NormalBrush}" Data="M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3M19,5V19H5V5H19Z" />
                    </Canvas>
                </Viewbox>
                <Viewbox Name="CheckMark"
                         Width="16" Height="16"
                         Visibility="Collapsed" 
                         VerticalAlignment="Center"
                         HorizontalAlignment="Center"
                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                         UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
                    <Canvas Width="24" Height="24">
                        <Path Fill="{StaticResource NormalBrush}" Data="M19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3M19,5V19H5V5H19M10,17L6,13L7.41,11.58L10,14.17L16.59,7.58L18,9" />
                    </Canvas>
                </Viewbox>                
                <ContentPresenter Name="HeaderHost" 
                                  Grid.Column="1" 
                                  ContentSource="Header" 
                                  RecognizesAccessKey="True" 
                                  VerticalAlignment="Center"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                  UseLayoutRounding="{TemplateBinding UseLayoutRounding}"/>                
                <TextBlock x:Name="InputGestureText"
                           Grid.Column="2"
                           Text="{TemplateBinding InputGestureText}"
                           Margin="5,2,0,2"
                           DockPanel.Dock="Right" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>                
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Visible"/>
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Foreground" Value="{Binding MouseOverForeground, RelativeSource={RelativeSource Self}}"/>
                <Setter TargetName="Border" Property="Background" Value="{Binding MouseOverBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{Binding IsPressedForeground, RelativeSource={RelativeSource Self}}"/>
                <Setter TargetName="HeaderHost" Property="Opacity" Value="{Binding IsPressedBackgroundOpacity, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="Icon" Property="Opacity" Value="{Binding IsPressedBackgroundOpacity, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="Border" Property="Background" Value="{Binding IsPressedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding IsPressedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="Border" Property="Opacity"  Value="0.8"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{Binding DisabledForeground, RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="Border" Property="Background" Value="{Binding DisabledBackground, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding DisabledBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="HeaderHost" Property="Opacity" Value="0.4" />
                <Setter TargetName="Icon" Property="Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SubmenuHeader -->
    <ControlTemplate x:Key="SubmenuHeaderTemplateKey" TargetType="{x:Type l:ZapMenuItem}">
        <Border Name="Border" >
            <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                  UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>                
                <ContentPresenter Name="Icon" 
                                  Margin="6,0,6,0" 
                                  VerticalAlignment="Center" 
                                  ContentSource="Icon" 
                                  Width="16" Height="16"                                  
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                  UseLayoutRounding="{TemplateBinding UseLayoutRounding}"/>                
                <ContentPresenter Name="HeaderHost" 
                                  Grid.Column="1" 
                                  ContentSource="Header" 
                                  RecognizesAccessKey="True"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                  UseLayoutRounding="{TemplateBinding UseLayoutRounding}"/>                
                <TextBlock x:Name="InputGestureText"
                           Grid.Column="2"
                           Text="{TemplateBinding InputGestureText}"
                           Margin="5,2,2,2"
                           DockPanel.Dock="Right"/>                
                <Path Grid.Column="3"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Data="M 0 0 L 0 7 L 4 3.5 Z" 
                      Fill="{TemplateBinding Foreground}" />
                <Popup Name="Popup"
                       Placement="Right"
                       HorizontalOffset="-3" 
                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                       AllowsTransparency="True" 
                       Focusable="False"
                       PopupAnimation="Fade">
                    <Border Name="SubmenuBorder"
                            Margin="0,0,5,5"
                            Background="{TemplateBinding PopupBackground}"
                            BorderBrush="{TemplateBinding PopupBorderBrush}"
                            BorderThickness="{TemplateBinding PopupBorderThickness}" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                            UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
                        <Border.Effect>
                            <DropShadowEffect ShadowDepth="1" Direction="270" />
                        </Border.Effect>
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" 
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    UseLayoutRounding="{TemplateBinding UseLayoutRounding}"/>
                    </Border>
                </Popup>                
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsRoundPopup" Value="True">
                <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="4"/>
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Foreground" Value="{Binding MouseOverForeground, RelativeSource={RelativeSource Self}}"/>
                <Setter TargetName="Border" Property="Background" Value="{Binding MouseOverBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding MouseOverBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{Binding IsPressedForeground, RelativeSource={RelativeSource Self}}"/>
                <Setter TargetName="HeaderHost" Property="Opacity" Value="{Binding IsPressedBackgroundOpacity, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="Icon" Property="Opacity" Value="{Binding IsPressedBackgroundOpacity, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="Border" Property="Background" Value="{Binding IsPressedBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding IsPressedBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="Border" Property="Opacity"  Value="0.8"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{Binding DisabledForeground, RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="Border" Property="Background" Value="{Binding DisabledBackground, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{Binding DisabledBorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="HeaderHost" Property="Opacity" Value="0.4" />
                <Setter TargetName="Icon" Property="Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <!-- MenuItem Style -->
    <Style TargetType="{x:Type l:ZapMenuItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{StaticResource TopLevelHeaderTemplateKey}"/>
                <Setter Property="Grid.IsSharedSizeScope" Value="True"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{StaticResource TopLevelItemTemplateKey}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{StaticResource SubmenuHeaderTemplateKey}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{StaticResource SubmenuItemTemplateKey}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
</ResourceDictionary>