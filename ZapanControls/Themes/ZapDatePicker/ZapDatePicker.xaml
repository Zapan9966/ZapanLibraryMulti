<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:ZapanControls.Controls.DatePicker"
                    xmlns:my="clr-namespace:ZapanControls.Controls.CalendarPicker"
                    xmlns:z="http://schemas.zapan.com/wpf/controls/2020"
                    xmlns:zc="clr-namespace:ZapanControls.Converters">
    
    <Style TargetType="{x:Type local:ZapDatePicker}">
        <Style.Resources>
            
            <BooleanToVisibilityConverter x:Key="BoolToVis" />
            
            <!-- ======================== -->
            <!-- = Styles and Templates = -->
            <!-- ======================== -->
            
            <!-- button image style -->
            <Style x:Key="ButtonImageStyle" TargetType="Button">
                <Setter Property="SnapsToDevicePixels" Value="true"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="Border" 
                                    CornerRadius="0" 
                                    BorderThickness="1" 
                                    Margin="-1,-2,-2,-2" 
                                    Background="{TemplateBinding Background}" 
                                    BorderBrush="Transparent">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True" 
                                                  Width="{Binding ActualHeight, Converter={zc:MathConverter}, ConverterParameter='@VALUE-3>0', ElementName=Border}"
                                                  Height="{Binding ActualHeight, Converter={zc:MathConverter}, ConverterParameter='@VALUE-3>0', ElementName=Border}" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsKeyboardFocused" Value="true">
                                    <!--border-->
                                    <Setter TargetName="Border" 
                                            Property="BorderBrush" 
                                            Value="{Binding ButtonBorderHover, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}" />
                                </Trigger>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <!--border-->
                                    <Setter TargetName="Border" 
                                            Property="BorderBrush" 
                                            Value="{Binding ButtonBorder, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Foreground" Value="{Binding IconHover, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="False">
                                    <Setter  Property="Foreground" Value="{Binding IconNormal, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <!--background-->
                                    <Setter TargetName="Border" 
                                            Property="Background" 
                                            Value="{Binding ButtonBackgroundPressed, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="False">
                                    <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!-- button brush style -->
            <Style x:Key="ButtonBrushStyle" TargetType="Button">
                <Setter Property="SnapsToDevicePixels" Value="true"/>
                <Setter Property="UseLayoutRounding" Value="true"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="Border" 
                                    Width="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" 
                                    Height="Auto" Margin="1"
                                    CornerRadius="3" 
                                    BorderThickness="1" 
                                    BorderBrush="{Binding ButtonBorder, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}"
                                    Background="{Binding ButtonBackground, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}">
                                <Viewbox Width="{Binding ActualHeight, Converter={zc:MathConverter}, ConverterParameter='@VALUE-2>0', ElementName=Border}" 
                                         Height="{Binding ActualHeight, Converter={zc:MathConverter}, ConverterParameter='@VALUE-2>0', ElementName=Border}">
                                    <Canvas Width="24" Height="24">
                                        <Path x:Name="Part_IconPath"  
                                              Fill="{Binding IconNormal, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}" 
                                              Data="M9,10V12H7V10H9M13,10V12H11V10H13M17,10V12H15V10H17M19,3A2,2 0 0,1 21,5V19A2,2 0 0,1 19,21H5C3.89,21 3,20.1 3,19V5A2,2 0 0,1 5,3H6V1H8V3H16V1H18V3H19M19,19V8H5V19H19M9,14V16H7V14H9M13,14V16H11V14H13M17,14V16H15V14H17Z" />
                                    </Canvas>
                                </Viewbox>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsKeyboardFocused" Value="true">
                                    <!--border-->
                                    <Setter TargetName="Border" 
                                            Property="BorderBrush" 
                                            Value="{Binding ButtonBorderHover, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <!--border-->
                                    <Setter TargetName="Border" 
                                            Property="BorderBrush" 
                                            Value="{Binding ButtonBorderHover, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}" />
                                    <!--background-->
                                    <Setter TargetName="Border" 
                                            Property="Background" 
                                            Value="{Binding ButtonBackgroundHover, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}" />
                                    <!--icon-->
                                    <Setter TargetName="Part_IconPath" 
                                            Property="Fill" 
                                            Value="{Binding IconHover, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <!--border-->
                                    <Setter TargetName="Border" 
                                            Property="BorderBrush" 
                                            Value="{Binding ButtonBorderPressed, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}" />
                                    <!--background-->
                                    <Setter TargetName="Border" 
                                            Property="Background" 
                                            Value="{Binding ButtonBackgroundPressed, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}" />
                                    <!--icon-->
                                    <Setter TargetName="Part_IconPath" 
                                            Property="Fill"
                                            Value="{Binding IconPressed, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!-- button flat style -->
            <Style x:Key="ButtonFlatStyle" TargetType="Button">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="UseLayoutRounding" Value="True"/>
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="Border" 
                                    Width="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" 
                                    Height="Auto"
                                    Margin="-1,-2,-2,-2"
                                    BorderThickness="1" 
                                    Background="{Binding ButtonBackground, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}"
                                    BorderBrush="{Binding ButtonBorder, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}">
                                <Viewbox Width="{Binding ActualHeight, Converter={zc:MathConverter}, ConverterParameter='@VALUE-3>0', ElementName=Border}" 
                                         Height="{Binding ActualHeight, Converter={zc:MathConverter}, ConverterParameter='@VALUE-3>0', ElementName=Border}">
                                    <Canvas Width="24" Height="24">
                                        <Path x:Name="Part_IconPath"  
                                              Fill="{Binding IconNormal, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}"
                                              Data="M9,10V12H7V10H9M13,10V12H11V10H13M17,10V12H15V10H17M19,3A2,2 0 0,1 21,5V19A2,2 0 0,1 19,21H5C3.89,21 3,20.1 3,19V5A2,2 0 0,1 5,3H6V1H8V3H16V1H18V3H19M19,19V8H5V19H19M9,14V16H7V14H9M13,14V16H11V14H13M17,14V16H15V14H17Z" />
                                    </Canvas>
                                </Viewbox>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsKeyboardFocused" Value="True">
                                    <!--border-->
                                    <Setter TargetName="Border" 
                                            Property="BorderBrush" 
                                            Value="{Binding ButtonBorderHover, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}" />
                                    <!--icon-->
                                    <Setter TargetName="Part_IconPath" 
                                            Property="Fill" 
                                            Value="{Binding IconHover, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <!--border-->
                                    <Setter TargetName="Border" 
                                            Property="BorderBrush" 
                                            Value="{Binding ButtonBorderHover, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}" />
                                    <!--background-->
                                    <Setter TargetName="Border" 
                                            Property="Background" 
                                            Value="{Binding ButtonBackgroundHover, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}" />
                                    <!--icon-->
                                    <Setter TargetName="Part_IconPath" 
                                            Property="Fill" 
                                            Value="{Binding IconHover, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <!--border-->
                                    <Setter TargetName="Border" 
                                            Property="BorderBrush" 
                                            Value="{Binding ButtonBorderPressed, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}" />
                                    <!--background-->
                                    <Setter TargetName="Border" 
                                            Property="Background" 
                                            Value="{Binding ButtonBackgroundPressed, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}" />
                                    <!--icon-->
                                    <Setter TargetName="Part_IconPath" 
                                            Property="Fill"
                                            Value="{Binding IconPressed, RelativeSource={RelativeSource AncestorType={x:Type local:ZapDatePicker}}}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--contents textbox-->
            <ControlTemplate x:Key="TextBoxTemplate">
                <Border Name="Border" 
                        BorderThickness="1" 
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        CornerRadius="1">
                    <ScrollViewer x:Name="PART_ContentHost" 
                                  CanContentScroll="False" 
                                  VerticalAlignment="Center" VerticalContentAlignment="Top" 
                                  Padding="0"/>
                </Border>
            </ControlTemplate>
        </Style.Resources>
        
        <!-- ==================== -->
        <!-- = Control Template = -->
        <!-- ==================== -->
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ZapDatePicker}">
                    <Border Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}"                            
                            BorderThickness="1" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                            Width="auto" Height="auto">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <CheckBox Name="Part_DateCheckBox" Grid.Column="0"  
                                      HorizontalAlignment="Left" VerticalAlignment="Center" 
                                      IsChecked="{TemplateBinding IsChecked}"
                                      Visibility="{TemplateBinding IsCheckable, Converter={StaticResource BoolToVis}}"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                      Margin="4,2,2,2"/>
                            <TextBox Name="Part_DateTextBox" 
                                     Template="{StaticResource TextBoxTemplate}"
                                     Foreground="{TemplateBinding Foreground}"
                                     BorderBrush="Transparent"                                      
                                     Grid.Column="1" 
                                     VerticalContentAlignment="Center" 
                                     HorizontalAlignment="Stretch" 
                                     Margin="2" 
                                     Width="Auto"
                                     AcceptsReturn="False" 
                                     MaxLines="1" 
                                     FlowDirection="LeftToRight" 
                                     Text="{TemplateBinding Text    }"
                                     SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                     UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                     IsReadOnly="{TemplateBinding IsReadOnly}">
                            </TextBox>
                            <Button Name="Part_CalendarButton"                                    
                                    Grid.Column="2" 
                                    Style="{StaticResource ButtonFlatStyle}" 
                                    Margin="1"
                                    Height="Auto"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                    HorizontalAlignment="Right" VerticalAlignment="Stretch">
                                <Image Name="Part_ButtonImage" 
                                       Margin="1" 
                                       Stretch="Uniform"/>
                            </Button>
                            <Popup Name="Part_CalendarPopup" 
                                   Margin="0,22,-22,-12"
                                   HorizontalAlignment="Right" 
                                   PlacementTarget="{Binding ElementName=Part_CalendarButton}" 
                                   StaysOpen="False">
                                <Grid Name="Part_CalendarGrid" Background="White">
                                    <my:Calendar Height="160" Width="160" 
                                                 FooterVisibility="Collapsed" WeekColumnVisibility="Collapsed" 
                                                 FontSize="9"/>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
