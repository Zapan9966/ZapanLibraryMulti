<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:l="clr-namespace:ZapanControls.Controls"
                    xmlns:c="clr-namespace:ZapanControls.Converters"
                    xmlns:i="clr-namespace:Microsoft.Xaml.Behaviors;assembly=Microsoft.Xaml.Behaviors"
                    xmlns:b="clr-namespace:ZapanControls.Behaviours"
                    xmlns:s="clr-namespace:System.Windows.Shell;assembly=PresentationFramework" >

    <BooleanToVisibilityConverter x:Key="ZapWindowBoolToVis" />

    <!--  Button style -->
    <Style x:Key="WindowFlatButtonStyle" TargetType="{x:Type l:ZapButtonFlat}">
        <Setter Property="Background" Value="{Binding TitleBarBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="Foreground" Value="{Binding TitleBarForeground, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="IsPressedBackground" Value="#BF404040" />
        <Setter Property="IsPressedBackgroundOpacity" Value="0.75" />
        <Setter Property="MouseOverBackground" Value="#BF808080"/>
        <Setter Property="FontFamily" Value="Webdings"/>
        <Setter Property="FontSize" Value="13.333" />
        <Setter Property="Width" Value="{Binding TitleBarHeight, RelativeSource={RelativeSource TemplatedParent}, Converter={c:MathConverter}, ConverterParameter=@VALUE+15}"/>
        <Setter Property="Foreground" Value="{Binding TitleBarForeground, RelativeSource={RelativeSource TemplatedParent}}" />
    </Style>

    <Style x:Key="WindowRoundedButtonStyle" TargetType="{x:Type l:ZapButtonGlass}">
        <Setter Property="Background" Value="{Binding TitleBarRoundedButtonBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="MouseOverBackground" Value="{Binding TitleBarRoundedButtonBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="IsPressedBackground" Value="{Binding TitleBarRoundedButtonBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="BorderBrush" Value="{Binding TitleBarRoundedButtonBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="MouseOverBorderBrush" Value="{Binding TitleBarRoundedButtonBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="IsPressedBorderBrush" Value="{Binding TitleBarRoundedButtonBorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="Foreground" Value="{Binding TitleBarForeground, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="MouseOverForeground" Value="{Binding TitleBarForeground, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="IsPressedForeground" Value="{Binding TitleBarForeground, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="FontFamily" Value="Webdings"/>
        <Setter Property="FontSize" Value="13.333" />
        <Setter Property="Margin" Value="1,5,0,5"/>
        <Setter Property="Width" Value="{Binding TitleBarHeight, RelativeSource={RelativeSource TemplatedParent}, Converter={c:MathConverter}, ConverterParameter=@VALUE+2}"/>
        <Setter Property="Foreground" Value="{Binding TitleBarForeground, RelativeSource={RelativeSource TemplatedParent}}" />
    </Style>

    <!-- Window style -->
    <Style TargetType="{x:Type l:ZapWindow}" >
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="Background" Value="#505050" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="Indigo"/>
        <Setter Property="s:WindowChrome.WindowChrome">
            <Setter.Value>
                <s:WindowChrome GlassFrameThickness="0" 
                                ResizeBorderThickness="6" 
                                CaptionHeight="0" 
                                CornerRadius="0" 
                                NonClientFrameEdges="None"
                                UseAeroCaptionButtons="True" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type l:ZapWindow}" >
                    <Grid>
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                x:Name="windowBorder">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <Border Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3" x:Name="moveBorder" Background="{TemplateBinding TitleBarBackground}">
                                    <Border.InputBindings>
                                        <MouseBinding MouseAction="LeftDoubleClick" Command="{Binding RestoreCommand, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </Border.InputBindings>
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="MouseLeftButtonDown">
                                            <b:InvokeDelegateCommandAction Command="{Binding DragMoveCommand, RelativeSource={RelativeSource TemplatedParent}}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </Border>

                                <Image Grid.Row="0" Grid.Column="0" Margin="10,0,0,0" x:Name="iconImage" Width="18" Height="18" VerticalAlignment="Center" 
                                       Source="{TemplateBinding Icon}" Focusable="False" IsHitTestVisible="False"/>

                                <TextBlock Grid.Row="0" Grid.Column="1" IsHitTestVisible="False" VerticalAlignment="Center" Margin="10,0,0,0" Focusable="False"
                                           Text="{TemplateBinding Title}" Foreground="{TemplateBinding TitleBarForeground}" />

                                <Border x:Name="flatTitleBar" Grid.Row="0" Grid.Column="2" Visibility="Collapsed" Panel.ZIndex="100"
                                        Height="{Binding TitleBarHeight, RelativeSource={RelativeSource TemplatedParent}}">
                                    <StackPanel Orientation="Horizontal" VerticalAlignment="Stretch" Margin="0,0,0,1" >
                                        <l:ZapButtonFlat x:Name="minimizeFlatButton" Content="0" Style="{StaticResource WindowFlatButtonStyle}"
                                                         Visibility="{Binding ShowMinimizeButton, 
                                                                              RelativeSource={RelativeSource TemplatedParent}, 
                                                                              Converter={StaticResource ZapWindowBoolToVis}}">
                                            <i:Interaction.Triggers>
                                                <i:EventTrigger EventName="Click">
                                                    <b:InvokeDelegateCommandAction Command="{Binding MinimizeCommand, RelativeSource={RelativeSource TemplatedParent}}" 
                                                                                   CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=InvokeParameter}"/>
                                                </i:EventTrigger>
                                            </i:Interaction.Triggers>
                                        </l:ZapButtonFlat>
                                        <l:ZapButtonFlat x:Name="restoreFlatButton" Content="1" Style="{StaticResource WindowFlatButtonStyle}" 
                                                         Visibility="{Binding ShowMaximizeButton, 
                                                                              RelativeSource={RelativeSource TemplatedParent}, 
                                                                              Converter={StaticResource ZapWindowBoolToVis}}">
                                            <i:Interaction.Triggers>
                                                <i:EventTrigger EventName="Click">
                                                    <b:InvokeDelegateCommandAction Command="{Binding RestoreCommand, RelativeSource={RelativeSource TemplatedParent}}" 
                                                                                   CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=InvokeParameter}"/>
                                                </i:EventTrigger>
                                            </i:Interaction.Triggers>
                                        </l:ZapButtonFlat>
                                        <l:ZapButtonFlat x:Name="closeFlatButton" Content="r" MouseOverBackground="Red" MouseOverForeground="White" 
                                                         IsPressedBackground="Red" IsPressedBackgroundOpacity="0.75"
                                                         IsEnabled="{Binding CanClosed, RelativeSource={RelativeSource TemplatedParent}}"                                                         
                                                         Visibility="{Binding ShowCloseButton, 
                                                                              RelativeSource={RelativeSource TemplatedParent}, 
                                                                              Converter={StaticResource ZapWindowBoolToVis}}">                                            
                                            <i:Interaction.Triggers>
                                                <i:EventTrigger EventName="Click">
                                                    <b:InvokeDelegateCommandAction Command="{Binding CloseCommand, RelativeSource={RelativeSource TemplatedParent}}" 
                                                                                   CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=InvokeParameter}"/>
                                                </i:EventTrigger>
                                            </i:Interaction.Triggers>
                                            <l:ZapButtonFlat.Style>
                                                <Style TargetType="{x:Type l:ZapButtonFlat}" BasedOn="{StaticResource WindowFlatButtonStyle}">
                                                    <Style.Triggers>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter Property="Opacity" Value="0.4" />
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </l:ZapButtonFlat.Style>
                                        </l:ZapButtonFlat>
                                    </StackPanel>
                                </Border>

                                <Border x:Name="roundedTitleBar" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3" Visibility="Collapsed"                                 
                                        Panel.ZIndex="100" BorderThickness="0,0,0,1" BorderBrush="{TemplateBinding BorderBrush}">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="0.507*"/>
                                            <RowDefinition Height="0.493*"/>
                                        </Grid.RowDefinitions>

                                        <Border x:Name="shine" HorizontalAlignment="Stretch" CornerRadius="4,4,0,0" IsHitTestVisible="False" >
                                            <Border.Background>
                                                <LinearGradientBrush EndPoint="0.494,0.889" StartPoint="0.494,0.028">
                                                    <GradientStop Color="#99FFFFFF" Offset="0"/>
                                                    <GradientStop Color="#33FFFFFF" Offset="1"/>
                                                </LinearGradientBrush>
                                            </Border.Background>
                                        </Border>
                                        <StackPanel Grid.RowSpan="2" Orientation="Horizontal" VerticalAlignment="Stretch" Margin="0,0,10,0" HorizontalAlignment="Right">
                                            <l:ZapButtonGlass x:Name="minimizeRoundedButton" Content="0" Style="{StaticResource WindowRoundedButtonStyle}" 
                                                              Visibility="{Binding ShowMinimizeButton, 
                                                                                   Converter={StaticResource ZapWindowBoolToVis},
                                                                                   RelativeSource={RelativeSource TemplatedParent}}">
                                                <i:Interaction.Triggers>
                                                    <i:EventTrigger EventName="Click">
                                                        <b:InvokeDelegateCommandAction Command="{Binding MinimizeCommand, RelativeSource={RelativeSource TemplatedParent}}" 
                                                                                       CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=InvokeParameter}"/>
                                                    </i:EventTrigger>
                                                </i:Interaction.Triggers>
                                            </l:ZapButtonGlass>
                                            <l:ZapButtonGlass x:Name="restoreRoundedButton" Content="1" Style="{StaticResource WindowRoundedButtonStyle}" 
                                                              Visibility="{Binding ShowMaximizeButton, 
                                                                                   Converter={StaticResource ZapWindowBoolToVis},
                                                                                   RelativeSource={RelativeSource TemplatedParent}}">
                                                <i:Interaction.Triggers>
                                                    <i:EventTrigger EventName="Click">
                                                        <b:InvokeDelegateCommandAction Command="{Binding RestoreCommand, RelativeSource={RelativeSource TemplatedParent}}" 
                                                                                       CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=InvokeParameter}"/>
                                                    </i:EventTrigger>
                                                </i:Interaction.Triggers>
                                            </l:ZapButtonGlass>
                                            <l:ZapButtonGlass x:Name="closeRoundedButton" Content="r" Background="Red" BorderBrush="Crimson" Style="{StaticResource WindowRoundedButtonStyle}"                                                               
                                                              Visibility="{Binding ShowCloseButton, Converter={StaticResource ZapWindowBoolToVis}, RelativeSource={RelativeSource TemplatedParent}}"
                                                              IsEnabled="{Binding CanClosed, RelativeSource={RelativeSource TemplatedParent}}">
                                                <i:Interaction.Triggers>
                                                    <i:EventTrigger EventName="Click">
                                                        <b:InvokeDelegateCommandAction Command="{Binding CloseCommand, RelativeSource={RelativeSource TemplatedParent}}" 
                                                                                       CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=InvokeParameter}"/>
                                                    </i:EventTrigger>
                                                </i:Interaction.Triggers>
                                            </l:ZapButtonGlass>
                                        </StackPanel>
                                    </Grid>
                                </Border>
                                
                                <Border Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3">
                                    <AdornerDecorator>
                                        <Grid>
                                            <ContentPresenter />
                                            <Grid x:Name="gridDim" Visibility="Collapsed">
                                                <Grid.Background>
                                                    <SolidColorBrush Color="Black" Opacity="0.75"/>
                                                </Grid.Background>
                                            </Grid>
                                        </Grid>
                                    </AdornerDecorator>
                                </Border>
                                
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="iconImage" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="TitleBarStyle" Value="Flat">
                            <Setter TargetName="flatTitleBar" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="TitleBarStyle" Value="Rounded">
                            <Setter TargetName="roundedTitleBar" Property="Visibility" Value="Visible"/>
                            <Setter Property="AllowsTransparency" Value="True"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TitleBarStyle" Value="Rounded" />
                                <Condition Property="WindowState" Value="Normal" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="windowBorder" Property="CornerRadius" Value="4,4,0,0" />
                            <Setter TargetName="moveBorder" Property="CornerRadius" Value="4,4,0,0" />
                        </MultiTrigger>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="restoreFlatButton" Property="Content" Value="2" />
                            <Setter TargetName="restoreRoundedButton" Property="Content" Value="2" />
                            <Setter TargetName="windowBorder" Property="BorderThickness" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>